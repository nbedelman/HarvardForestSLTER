{
    "contents" : "library(\"ggplot2\")\nlibrary(\"reshape2\")\n\n############################################\n###### Fall Phenology Data ############\n############################################\n\n################### Formatting ########################\n\n#read in the fall phenology data\nfallPheno=read.csv(\"../fall_phenology.csv\")\n\n#read in the species code info\nspeciesCodes=read.csv(\"../species_codes.csv\")\n\n#give a unique identifier to each tree\nfallPheno$schoolNum=as.numeric(as.factor(fallPheno$School.Code))\nfallPheno$uniqTreeID=(fallPheno$schoolNum*100 + fallPheno$Tree.ID)\nfallPheno$Date=as.Date(fallPheno$Date)\nfallPheno$Year=format(fallPheno$Date, \"%Y\")\n\n#associate the tres with species\nvec <- c()\nfor (i in seq(1,length(fallPheno$Species.Code))){\n  tryCatch(vec[i] <- (which(speciesCodes$Species.Code==as.character(fallPheno$Species.Code[i]))), \n           error=function(e){vec[i] <- 89})\n  }\n\n#Assign Scientific names to each tree\nSciNames = as.character(speciesCodes[vec,3])\nsplitNames=strsplit(SciNames, \" \")\ngenusVec = c()\nspeciesVec=c()\nfor(i in seq(1,length(splitNames))){\n  genusVec[i]=splitNames[i][[1]][1]\n  speciesVec[i]=splitNames[i][[1]][2]\n}\nfallPheno$genus = genusVec\nfallPheno$species = speciesVec\nfallPheno$Tree.Color=as.numeric(as.character(fallPheno$Tree.Color))\n\n#Get Fallen leaves as a percentage of total leaves\nfallPheno$pctFallen=fallPheno$Fallen.Leaves/fallPheno$Total.Leaves\n\n############# GRAPHING ######################\n\n####################General Graphing Functions and preparation#############################################\n\ngraphingFrame=data.frame(julDate=fallPheno$Julian, pctFallen=fallPheno$pctFallen, leafColor=fallPheno$Tree.Color, genus=fallPheno$genus, species=fallPheno$species, year=fallPheno$Year)\nattach(graphingFrame)\nsorted=graphingFrame[order(julDate),]\nallDates=unique(sorted$julDate)\n\noverallStatFrame=fallPheno[order(fallPheno$uniqTreeID),]\nnumTrees=length(unique(overallStatFrame$uniqTreeID))\nnumObs=length(overallStatFrame$uniqTreeID)\nnumYears=length(unique(overallStatFrame$Year))\n\noverviewInfo <- function(data, column, allDates){\n  allAverages=c()\n  for (date in allDates){\n    allVals=subset(data, julDate==date)[column][[1]]\n    avg=mean(allVals, na.rm=TRUE)\n    allAverages=c(allAverages,avg)\n  }\n  return(allAverages)\n}\n\n######################fallen leaves as percent of total leaves, by Julian date,##############################\n\ncorrectlyDone=subset(sorted, pctFallen <=1)\n\nfallenAverages=overviewInfo(correctlyDone,\"pctFallen\",allDates)\noverallAvgFallen=data.frame(julDate=allDates, values=fallenAverages)\n\n#Smoothed Line\ngraph1=ggplot() +\n  stat_smooth(data=overallAvgFallen, aes(x=julDate, y=values)) +\n  geom_point(data=overallAvgFallen, aes(x=julDate, y=values)) +\n  scale_y_continuous(limits=c(-.1, 1.1)) +\n  scale_x_continuous(limits=c(240, 350)) +\n  annotate(\"text\", x = 253, y = 1.0, label = paste0(\"Number of Trees: \", numTrees)) +\n  annotate(\"text\", x = 253, y = 0.9, label = paste0(\"Number of Observations: \",numObs))+\n  annotate(\"text\", x = 253, y = 0.8, label = paste0(\"Number of Years: \",numYears))+\n  labs(title=\"Overall Average Number of Leaves Fallen by Julian Date\", x =\"Julian Date\", y=\"Percent Fallen\")\nggsave(graph1, filename = \"leafFallOverall.png\")\ngraph1\n\n####################### Tree Color as percent of total leaves, by Julian Date ----\n\nsorted$leafColor=as.numeric(as.character(sorted$leafColor))\ncolorAverages=overviewInfo(sorted,\"leafColor\",allDates)\noverallAvgColor=data.frame(julDate=allDates, values=colorAverages)\n\ngraph2=ggplot() +\n  stat_smooth(data=overallAvgColor, aes(x=julDate, y=values)) +\n  geom_point(data=overallAvgColor, aes(x=julDate, y=values)) +\n  scale_y_continuous(limits=c(0.9, 4.1)) +\n  scale_x_continuous(limits=c(240, 350)) +\n  annotate(\"text\", x = 253, y = 4.0, label = paste0(\"Number of Trees: \", numTrees)) +\n  annotate(\"text\", x = 253, y = 3.8, label = paste0(\"Number of Observations: \",numObs))+\n  annotate(\"text\", x = 253, y = 3.6, label = paste0(\"Number of Years: \",numYears))+\n  labs(title=\"Overall Average Tree Color by Julian Date\", x =\"Julian Date\", y=\"Tree Color\")\n#ggsave(graph1, filename = \"treeColorOverall.png\")\ngraph2\n\n######################## Tree Color and Leaf fall Combined ###################\n\n\ncombiDate=rep(allDates,2)\n\nfallenAverages=overviewInfo(sorted,\"pctFallen\",allDates)\ncolorAverages=overviewInfo(sorted,\"leafColor\",allDates)\nreScaledColors=(colorAverages-1)/3\ncombiValue=c(fallenAverages,reScaledColors)\n\ncombiVariable=c(rep(\"leafFall\", length(allDates)), rep(\"color\", length(allDates)))\n\ncombinedFrame=data.frame(combiDate,combiValue,combiVariable)\nusable=subset(combinedFrame, combiValue<2)\n\ngraph1 <- ggplot() + \n  geom_point(data=usable, aes(x=combiDate, y=combiValue, colour=combiVariable)) + \n  stat_smooth(data=usable, formula=y~x, aes(x=combiDate, y=combiValue, colour=combiVariable)) + \n  scale_y_continuous(limits=c(-.1, 1.1)) +\n  scale_x_continuous(limits=c(240, 350)) +\n  annotate(\"text\", x = 253, y = 1.0, label = paste0(\"Number of Trees: \", numTrees)) +\n  annotate(\"text\", x = 253, y = 0.95, label = paste0(\"Number of Observations: \",numObs)) +\n  annotate(\"text\", x = 253, y = 0.9, label = paste0(\"Number of Years: \",numYears)) +\n  labs(title=\"Tree Color and Leaf Fall by Julian Date\", x=\"Julian Date\", y=\"Normalized Tree Color, Percent of Leaves Fallen\")\nggsave(graph1,filename=\"combinedOverall.png\")\ngraph1\n\n######################By Genus Graphing Functions and preparation#############################################\n\nbyGenera=graphingFrame[order(graphingFrame$genus),]\nallGenera=unique(as.character(byGenera$genus))\n\n#Get info on the amount of data we have on each genus\ngenusInfoFrame=data.frame(Genus=c(\"numTrees\", \"numObs\", \"numYears\"))\nfor (i in 1:length(allGenera)){\n  thisFrame=subset(fallPheno, fallPheno$genus==allGenera[i])\n  uniques=unique(thisFrame$uniqTreeID)\n  numTrees=length(uniques)\n  numObs=nrow(thisFrame)\n  numYears=length(unique(thisFrame$Year))\n  genusInfoFrame[allGenera[i]] <- c(numTrees,numObs, numYears)\n}\n\n#set up data frame\nbyGenusFrame=data.frame(Date=allDates)\nfor (i in 1:length(allGenera)){\n  byGenusFrame[i+1] <- rep(0,length(allDates))\n}\ncolnames(byGenusFrame) <- c(\"Date\", allGenera)\n\n\nf <- function(index,genusList, dateList, column){\n  allVals=subset(sorted, genus==genusList[index])\n  thisGenus=c()\n  for (date in dateList){\n    thisDate=subset(allVals, julDate==date)[column][[1]]\n    avg=mean(thisDate, na.rm=TRUE)\n    thisGenus=c(thisGenus,avg)\n  }\n  return (thisGenus)\n}\n\n######################fallen leaves as percent of total leaves, by Julian date, by Genus######################\n\ncorrectlyDone=subset(sorted, pctFallen <=1)\n\nfor (i in 1:length(allGenera)){\n  byGenusFrame[i+1] <- f(i,allGenera,allDates, \"pctFallen\")\n}\n\n#plot each species on its own graph\n\np <- function(x){\n  nm=names(x)\n  for (i in 2:length(nm)){\n    plots <- ggplot(data=x, aes(x=Date)) + aes_string(y = nm[i]) + geom_point() + stat_smooth()+\n      scale_y_continuous(limits=c(-.1, 1.1)) +\n      scale_x_continuous(limits=c(240, 350)) +\n      annotate(\"text\", x = 253, y = 1.0, label = paste0(\"Number of Trees: \", genusInfoFrame[1,i])) +\n      annotate(\"text\", x = 253, y = 0.9, label = paste0(\"Number of Observations: \",genusInfoFrame[2,i])) +\n      annotate(\"text\", x = 253, y = 0.8, label = paste0(\"Number of Years: \",genusInfoFrame[3,i])) +\n      labs(title=paste0(\"Average Number of Leaves Fallen by Julian Date, \", nm[i]), x=\"Julian Date\", y=\"Percent Fallen\")\n    ggsave(plots,filename=paste(\"leafFall\",nm[i],\".png\",sep=\"\"))\n  }\n}\np(byGenusFrame)\n\n#Plot all the species on one graph (big mess!)\n#data_long <- melt(byGenusFrame, id=\"Date\")\n\n######################Tree color by Julian Date\n\ngraph1=ggplot() +\n  stat_smooth(data=overallAvgColor, aes(x=julDate, y=values)) +\n  geom_point(data=overallAvgColor, aes(x=julDate, y=values)) +\n  scale_y_continuous(limits=c(0.9, 4.1)) +\n  scale_x_continuous(limits=c(240, 350)) +\n  annotate(\"text\", x = 253, y = 4.0, label = paste0(\"Number of Trees: \", numTrees)) +\n  annotate(\"text\", x = 253, y = 3.7, label = paste0(\"Number of Observations: \",numObs))+\n  labs(title=\"Overall Average Tree Color by Julian Date\", x =\"Julian Date\", y=\"Percent Fallen\")+\n  stat_smooth(data=overallAvgFallen, aes(x=julDate, y=values*3+1, colour=\"red\"))\ngraph1\n\n###################### tree color as percent of total leaves, by Julian date, by Genus########################\n\nfor (i in 1:length(allGenera)){\n  byGenusFrame[i+1] <- f(i,allGenera,allDates, \"leafColor\")\n}\n\n#plot each species on its own graph\n\np <- function(x){\n  nm=names(x)\n  for (i in 2:length(nm)){\n    plots <- ggplot(data=x, aes(x=Date)) + aes_string(y = nm[i]) + geom_point() + stat_smooth()+\n      scale_y_continuous(limits=c(0.9, 4.1)) +\n      scale_x_continuous(limits=c(240, 350)) +\n      annotate(\"text\", x = 253, y = 4.0, label = paste0(\"Number of Trees: \", genusInfoFrame[1,i])) +\n      annotate(\"text\", x = 253, y = 3.8, label = paste0(\"Number of Observations: \",genusInfoFrame[2,i])) +\n      annotate(\"text\", x = 253, y = 3.6, label = paste0(\"Number of Years: \",genusInfoFrame[3,i])) +\n      labs(title=paste0(\"Average Tree Color Score by Julian Date, \", nm[i]), x=\"Julian Date\", y=\"Tree Color\")\n    ggsave(plots,filename=paste(\"treeColor\",nm[i],\".png\",sep=\"\"))\n  }\n}\np(byGenusFrame)\n\n######################Tree Color and Leaf Fall Combined by Genus ###########################\n\n#Set up tree color data frame\nbyGenusColor=data.frame(Date=allDates)\nfor (i in 1:length(allGenera)){\n  byGenusColor[i+1] <- rep(0,length(allDates))\n}\ncolnames(byGenusColor) <- c(\"Date\", allGenera)\n\nfor (i in 1:length(allGenera)){\n  byGenusColor[i+1] <- f(i,allGenera,allDates, \"leafColor\")\n}\n\n#Set up leaf fall data frame\nbyGenusLeafFall=data.frame(Date=allDates)\nfor (i in 1:length(allGenera)){\n  byGenusLeafFall[i+1] <- rep(0,length(allDates))\n}\ncolnames(byGenusLeafFall) <- c(\"Date\", allGenera)\n\nfor (i in 1:length(allGenera)){\n  byGenusLeafFall[i+1] <- f(i,allGenera,allDates, \"pctFallen\")\n}\n\n#Graph them together\np <- function(x,y){\n  nm=names(x)\n  for (i in 2:length(nm)){\n    normalizedColor=(x[nm[i]][[1]]-1)/3\n    leafFallData=y[nm[i]][[1]]\n    thisFrame=data.frame(Date=rep(x$Date , 2), value=c(normalizedColor,leafFallData), variable=c(rep(\"Color\",length(x$Date)),rep(\"leafFall\",length(x$Date))))\n    usable=subset(thisFrame, value<5)\n    plots <- ggplot() + \n      geom_point(data=usable, aes(x=Date, y=value, colour=variable)) + \n      stat_smooth(data=usable, aes(x=Date, y=value, colour=variable)) + \n      scale_y_continuous(limits=c(-0.1, 1.1)) +\n      scale_x_continuous(limits=c(240, 350)) +\n      annotate(\"text\", x = 253, y = 1.1, label = paste0(\"Number of Trees: \", genusInfoFrame[1,i])) +\n      annotate(\"text\", x = 253, y = 1.05, label = paste0(\"Number of Observations: \",genusInfoFrame[2,i])) +\n      annotate(\"text\", x = 253, y = 1.0, label = paste0(\"Number of Years: \",genusInfoFrame[3,i])) +\n      labs(title=paste0(\"Average Tree Color and Leaf Fall by Julian Date, \", nm[i]), x=\"Julian Date\", y=\"Normalized Tree Color Score, Percent of Leaves Fallen\")\n    ggsave(plots,filename=paste(\"combined\",nm[i],\".png\",sep=\"\"))\n  }\n}\np(byGenusColor, byGenusLeafFall)\n\n\n\n\n############################################\n###### Spring Phenology Data ############\n############################################\n\n################### Formatting ########################\n\n#read in the spring phenology data\nspringPheno=read.csv(\"../spring_phenology.csv\")\n\n#read in the species code info\nspeciesCodes=read.csv(\"../species_codes.csv\")\n\n#give a unique identifier to each tree\nspringPheno$schoolNum=as.numeric(as.factor(springPheno$School.Code))\nspringPheno$uniqTreeID=(springPheno$schoolNum*100 + springPheno$Tree.ID)\nspringPheno$Date=as.Date(springPheno$Date)\nspringPheno$Year=format(springPheno$Date, \"%Y\")\n\n#associate the trees with species\nvec <- c()\nfor (i in seq(1,length(springPheno$Species.Code))){\n  tryCatch(vec[i] <- (which(speciesCodes$Species.Code==as.character(springPheno$Species.Code[i]))), \n           error=function(e){vec[i] <- 89})\n}\n\n#Assign Scientific names to each tree\nSciNames = as.character(speciesCodes[vec,3])\nsplitNames=strsplit(SciNames, \" \")\ngenusVec = c()\nspeciesVec=c()\nfor(i in seq(1,length(splitNames))){\n  genusVec[i]=splitNames[i][[1]][1]\n  speciesVec[i]=splitNames[i][[1]][2]\n}\nspringPheno$genus = genusVec\nspringPheno$species = speciesVec\n\n#Get Open Buds as a percentage of total buds\nspringPheno$pctOpen=springPheno$Open.Buds/springPheno$Total.Buds\n\n############# GRAPHING ######################\n\n####################General Graphing Functions and preparation#############################################\ngraphingFrame=data.frame(julDate=springPheno$Julian, pctOpen=springPheno$pctOpen, leafLength=springPheno$Leaf.Length..cm., genus=springPheno$genus, species=springPheno$species, year=springPheno$Year)\nattach(graphingFrame)\nsorted=graphingFrame[order(julDate),]\nallDates=unique(sorted$julDate)\n\noverallStatFrame=springPheno[order(springPheno$uniqTreeID),]\nnumTrees=length(unique(overallStatFrame$uniqTreeID))\nnumObs=length(overallStatFrame$uniqTreeID)\nnumYears=length(unique(overallStatFrame$Year))\n\noverviewInfo <- function(data, column, allDates){\n  allAverages=c()\n  for (date in allDates){\n    allVals=subset(data, julDate==date)[column][[1]]\n    avg=mean(allVals, na.rm=TRUE)\n    allAverages=c(allAverages,avg)\n  }\n  return(allAverages)\n}\n\n###################### Open buds as percent of total buds, by Julian date,##############################\n\ncorrectlyDone=subset(sorted, pctOpen <=1)\n\nOpenAverages=overviewInfo(correctlyDone,\"pctOpen\",allDates)\noverallAvgOpen=data.frame(julDate=allDates, values=OpenAverages)\n\n#Smoothed Line\ngraph1=ggplot() +\n  stat_smooth(data=overallAvgOpen, aes(x=julDate, y=values)) +\n  geom_point(data=overallAvgOpen, aes(x=julDate, y=values)) +\n  scale_y_continuous(limits=c(-.1, 1.1)) +\n  scale_x_continuous(limits=c(75, 170)) +\n  annotate(\"text\", x = 90, y = 1.1, label = paste0(\"Number of Trees: \", numTrees)) +\n  annotate(\"text\", x = 90, y = 1.05, label = paste0(\"Number of Observations: \",numObs))+\n  annotate(\"text\", x = 90, y = 1, label = paste0(\"Number of Years: \",numYears))+\n  labs(title=\"Overall Average Percent of Buds Open by Julian Date\", x =\"Julian Date\", y=\"Percent Open\")\nggsave(graph1, filename = \"budOpenOverall.png\")\ngraph1\n\n###################### Leaf length by Julian Date ############################\n\nleafAverages=overviewInfo(sorted,\"leafLength\",allDates)\noverallAvgLength=data.frame(julDate=allDates, values=leafAverages)\n\ngraph2=ggplot() +\n  stat_smooth(data=overallAvgLength, aes(x=julDate, y=values)) +\n  geom_point(data=overallAvgLength, aes(x=julDate, y=values)) +\n  #scale_y_continuous(limits=c(0.9, 4.1)) +\n  scale_x_continuous(limits=c(75, 170)) +\n  annotate(\"text\", x = 90, y = 15, label = paste0(\"Number of Trees: \", numTrees)) +\n  annotate(\"text\", x = 90, y = 14, label = paste0(\"Number of Observations: \",numObs))+\n  annotate(\"text\", x = 90, y = 13, label = paste0(\"Number of Years: \",numYears))+\n  labs(title=\"Overall Average Leaf Length by Julian Date\", x =\"Julian Date\", y=\"Tree Color\")\nggsave(graph2, filename = \"leafLengthOverall.png\")\ngraph2\n\n######################## Open buds and leaf length Combined ###################\n\n\ncombiDate=rep(allDates,2)\n\nopenAverages=overviewInfo(sorted,\"pctOpen\",allDates)\nlengthAverages=overviewInfo(sorted,\"leafLength\",allDates)\nreScaledLengths=lengthAverages/max(lengthAverages, na.rm=TRUE)\ncombiValue=c(openAverages,reScaledLengths)\n\ncombiVariable=c(rep(\"budOpen\", length(allDates)), rep(\"leafLength\", length(allDates)))\n\ncombinedFrame=data.frame(combiDate,combiValue,combiVariable)\nusable=subset(combinedFrame, combiValue<2)\n\ngraph1 <- ggplot() + \n  geom_point(data=usable, aes(x=combiDate, y=combiValue, colour=combiVariable)) + \n  stat_smooth(data=usable, aes(x=combiDate, y=combiValue, colour=combiVariable)) + \n  scale_y_continuous(limits=c(-.1, 1.1)) +\n  scale_x_continuous(limits=c(75, 170)) +\n  annotate(\"text\", x = 90, y = 1.1, label = paste0(\"Number of Trees: \", numTrees)) +\n  annotate(\"text\", x = 90, y = 1.05, label = paste0(\"Number of Observations: \",numObs))+\n  annotate(\"text\", x = 90, y = 1, label = paste0(\"Number of Years: \",numYears))+\n  labs(title=\"Bud Open and Leaf Length by Julian Date\", x=\"Julian Date\", y=\"Normalized Leaf Length, Percent of Buds Open\")\nggsave(graph1,filename=\"combinedSpringOverall.png\")\ngraph1\n\n######################By Genus Graphing Functions and preparation#############################################\n\nbyGenera=graphingFrame[order(graphingFrame$genus),]\nallGenera=unique(as.character(byGenera$genus))\n\n#Get info on the amount of data we have on each genus\ngenusInfoFrame=data.frame(Genus=c(\"numTrees\", \"numObs\", \"numYears\"))\nfor (i in 1:length(allGenera)){\n  thisFrame=subset(springPheno, springPheno$genus==allGenera[i])\n  uniques=unique(thisFrame$uniqTreeID)\n  numTrees=length(uniques)\n  numObs=nrow(thisFrame)\n  numYears=length(unique(thisFrame$Year))\n  genusInfoFrame[allGenera[i]] <- c(numTrees,numObs, numYears)\n}\n\n#set up data frame\nbyGenusFrame=data.frame(Date=allDates)\nfor (i in 1:length(allGenera)){\n  byGenusFrame[i+1] <- rep(0,length(allDates))\n}\ncolnames(byGenusFrame) <- c(\"Date\", allGenera)\n\n\nf <- function(index,genusList, dateList, column){\n  allVals=subset(sorted, genus==genusList[index])\n  thisGenus=c()\n  for (date in dateList){\n    thisDate=subset(allVals, julDate==date)[column][[1]]\n    avg=mean(thisDate, na.rm=TRUE)\n    thisGenus=c(thisGenus,avg)\n  }\n  return (thisGenus)\n}\n\n###################### Open buds as percent of total buds, by Julian date, by Genus##############################\n\ncorrectlyDone=subset(sorted, pctOpen<=1)\n\nfor (i in 1:length(allGenera)){\n  byGenusFrame[i+1] <- f(i,allGenera,allDates, \"pctOpen\")\n}\n\n#plot each species on its own graph\n\np <- function(x){\n  nm=names(x)\n  for (i in 2:length(nm)){\n    plots <- ggplot(data=x, aes(x=Date)) + aes_string(y = nm[i]) + geom_point() + stat_smooth()+\n      scale_y_continuous(limits=c(-.1, 1.1)) +\n      scale_x_continuous(limits=c(75, 170)) +\n      annotate(\"text\", x = 85, y = 1.1, label = paste0(\"Number of Trees: \", genusInfoFrame[1,i])) +\n      annotate(\"text\", x = 85, y = 1.05, label = paste0(\"Number of Observations: \",genusInfoFrame[2,i])) +\n      annotate(\"text\", x = 85, y = 1.0, label = paste0(\"Number of Years: \",genusInfoFrame[3,i])) +\n      labs(title=paste0(\"Average Number of Buds Open by Julian Date, \", nm[i]), x=\"Julian Date\", y=\"Percent Fallen\")\n    ggsave(plots,filename=paste(\"budOpen\",nm[i],\".png\",sep=\"\"))\n  }\n}\np(byGenusFrame)\n\n###################### Leaf Length by Julian date, by Genus ##############################\n\n\n#Absolute Length in mm\n\nfor (i in 1:length(allGenera)){\n  byGenusFrame[i+1] <- f(i,allGenera,allDates, \"leafLength\")\n}\n\n#plot each species on its own graph\n\np <- function(x){\n  nm=names(x)\n  for (i in 2:length(nm)){\n    maxVal=max(x[nm[i]][[1]], na.rm=TRUE)\n    plots <- ggplot(data=x, aes(x=Date)) + aes_string(y = nm[i]) + geom_point() + stat_smooth()+\n      scale_y_continuous(limits=c(-.1, maxVal)) +\n      scale_x_continuous(limits=c(75, 170)) +\n      annotate(\"text\", x = 85, y = maxVal, label = paste0(\"Number of Trees: \", genusInfoFrame[1,i])) +\n      annotate(\"text\", x = 85, y = maxVal-0.75, label = paste0(\"Number of Observations: \",genusInfoFrame[2,i])) +\n      annotate(\"text\", x = 85, y = maxVal-1.5, label = paste0(\"Number of Years: \",genusInfoFrame[3,i])) +\n      labs(title=paste0(\"Average Leaf Length by Julian Date, \", nm[i]), x=\"Julian Date\", y=\"Leaf Length (mm)\")\n    ggsave(plots,filename=paste(\"leafLength\",nm[i],\".png\",sep=\"\"))\n  }\n}\np(byGenusFrame)\n\n\n#Normalized Length\n\nfor (i in 1:length(allGenera)){\n  byGenusFrame[i+1] <- f(i,allGenera,allDates, \"leafLength\")\n  byGenusFrame[i+1] <- byGenusFrame[i+1]/max(byGenusFrame[i+1],na.rm=TRUE)\n}\np <- function(x){\n  nm=names(x)\n  for (i in 2:length(nm)){\n    plots <- ggplot(data=x, aes(x=Date)) + aes_string(y = nm[i]) + geom_point() + stat_smooth()+\n      scale_y_continuous(limits=c(-.1, 1.1)) +\n      scale_x_continuous(limits=c(75, 170)) +\n      annotate(\"text\", x = 85, y = 1.1, label = paste0(\"Number of Trees: \", genusInfoFrame[1,i])) +\n      annotate(\"text\", x = 85, y = 1.05, label = paste0(\"Number of Observations: \",genusInfoFrame[2,i])) +\n      annotate(\"text\", x = 85, y = 1.0, label = paste0(\"Number of Years: \",genusInfoFrame[3,i])) +\n      labs(title=paste0(\"Average Leaf Length by Julian Date, \", nm[i]), x=\"Julian Date\", y=\"Leaf Length (normalized)\")\n    ggsave(plots,filename=paste(\"leafLengthNormalized\",nm[i],\".png\",sep=\"\"))\n  }\n}\np(byGenusFrame)\n\n###################### Open buds and leaf length combined, by Genus ###########################\n\n#Set up tree color data frame\nbyGenusBuds=data.frame(Date=allDates)\nfor (i in 1:length(allGenera)){\n  byGenusBuds[i+1] <- rep(0,length(allDates))\n}\ncolnames(byGenusBuds) <- c(\"Date\", allGenera)\n\nfor (i in 1:length(allGenera)){\n  byGenusBuds[i+1] <- f(i,allGenera,allDates, \"pctOpen\")\n}\n\n#Set up leaf length data frame\nbyGenusLeafLength=data.frame(Date=allDates)\nfor (i in 1:length(allGenera)){\n  byGenusLeafLength[i+1] <- rep(0,length(allDates))\n}\ncolnames(byGenusLeafLength) <- c(\"Date\", allGenera)\n\nfor (i in 1:length(allGenera)){\n  byGenusLeafLength[i+1] <- f(i,allGenera,allDates, \"leafLength\")\n  byGenusLeafLength[i+1] <- byGenusLeafLength[i+1]/max(byGenusLeafLength[i+1],na.rm=TRUE)\n}\n#Graph them together\np <- function(x,y){\n  nm=names(x)\n  for (i in 2:length(nm)){\n    normalizedLength=x[nm[i]][[1]]\n    budOpenData=y[nm[i]][[1]]\n    thisFrame=data.frame(Date=rep(x$Date , 2), value=c(normalizedLength,budOpenData), variable=c(rep(\"Leaf Length\",length(x$Date)),rep(\"Buds Open\",length(x$Date))))\n    usable=subset(thisFrame, value<5)\n    plots <- ggplot() + \n      geom_point(data=usable, aes(x=Date, y=value, colour=variable)) + \n      stat_smooth(data=usable, aes(x=Date, y=value, colour=variable)) + \n      scale_y_continuous(limits=c(-0.1, 1.1)) +\n      scale_x_continuous(limits=c(75, 170)) +\n      annotate(\"text\", x = 85, y = 1.1, label = paste0(\"Number of Trees: \", genusInfoFrame[1,i])) +\n      annotate(\"text\", x = 85, y = 1.05, label = paste0(\"Number of Observations: \",genusInfoFrame[2,i])) +\n      annotate(\"text\", x = 85, y = 1.0, label = paste0(\"Number of Years: \",genusInfoFrame[3,i])) +\n      labs(title=paste0(\"Average Leaf Length and Open Buds by Julian Date, \", nm[i]), x=\"Julian Date\", y=\"Normalized Leaf Length, Percent of Buds Open\")\n    ggsave(plots,filename=paste(\"combinedSpring\",nm[i],\".png\",sep=\"\"))\n  }\n}\np(byGenusLeafLength, byGenusBuds)\n\n############################################\n###### Hemlock Wooly Adelgid Data ##########\n############################################\n\n##############FORMATTING###################\n\n#read in the wooly adelgid data\nhemWA=read.csv(\"../hemlock_wooly_adelgid.csv\")\n\n\n#give a unique identifier to each tree\nhemWA$schoolNum=as.numeric(as.factor(hemWA$School.Code))\nhemWA$uniqTreeID=(hemWA$schoolNum*100 + hemWA$Tree.ID)\nhemWA$Date=as.Date(hemWA$Date)\nhemWA$Year=format(hemWA$Date, \"%Y\")\n\n####################General Graphing Functions and preparation#############################################\ngraphingFrame=data.frame(date=hemWA$Date, health=hemWA$Health,wool=hemWA$Wool, eggs=hemWA$Eggs, growth=hemWA$Growth..cm., tree=hemWA$uniqTreeID, year=hemWA$Year)\nattach(graphingFrame)\nsorted=graphingFrame[order(date),]\nallDates=unique(sorted$date)\nallYears=as.character(unique(sorted$year))\n\nnumTrees=length(unique(sorted$tree))\nnumObs=length(sorted$tree)\nnumYears=length(unique(sorted$year))\n\noverviewInfo <- function(data, timeColumn, dataColumn, allDates){\n  allAverages=c()\n  for (time in allDates){\n    allVals=subset(data, data[timeColumn][[1]]==time)[dataColumn][[1]]\n    avg=mean(allVals, na.rm=TRUE)\n    allAverages=c(allAverages,avg)\n  }\n  return(allAverages)\n}\n",
    "created" : 1450719095781.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "7|31|42|66|\n44|23|44|45|\n46|62|66|1|\n68|79|86|6|\n88|78|104|6|\n106|59|131|6|\n133|65|166|1|\n168|88|207|6|\n209|86|230|15|\n232|65|276|32|\n285|31|319|64|\n323|62|342|1|\n344|74|362|6|\n364|50|379|6|\n381|60|406|6|\n408|65|441|1|\n443|83|466|15|\n468|60|515|15|\n517|68|561|33|\n567|24|577|35|\n579|62|598|1|\n",
    "hash" : "4071662662",
    "id" : "9B706106",
    "lastKnownWriteTime" : 1450904987,
    "path" : "~/Documents/Harvard Forest/Schoolyard_Data/SLTER_dataAnalysis/SLTER_dataAnalysis.R",
    "project_path" : "SLTER_dataAnalysis.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}